SET search_path = public, pg_catalog;
-- postgresql full text search
ALTER TABLE tag_log ADD COLUMN textsearchable_index_col tsvector;
UPDATE tag_log SET textsearchable_index_col = setweight(to_tsvector('simple', coalesce(tag_log.csn,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.numero_id,'')), 'B')||setweight(to_tsvector('simple', coalesce(tag_log.eppn,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.eppn_init,'')), 'B')||setweight(to_tsvector('simple', coalesce(tag_log.application_name,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.location,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.application_name,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.status,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.firstname,'')), 'A')||setweight(to_tsvector('simple', coalesce(tag_log.lastname,'')), 'A');
ALTER TABLE device ADD COLUMN textsearchable_index_col tsvector;
UPDATE device SET textsearchable_index_col = setweight(to_tsvector('simple', coalesce(device.eppn_init,'')), 'A')||setweight(to_tsvector('simple', coalesce(device.numero_id,'')), 'A')||setweight(to_tsvector('simple', coalesce(device.imei,'')), 'A')||setweight(to_tsvector('simple', coalesce(device.mac_address,'')), 'A')||setweight(to_tsvector('simple', coalesce(device.location,'')), 'A')||setweight(to_tsvector('simple', coalesce(application.name,'')), 'A') FROM application where device.application=application.id;
CREATE FUNCTION textsearchable_taglog_trigger() RETURNS trigger AS $$ begin new.textsearchable_index_col = setweight(to_tsvector('simple', coalesce(new.csn,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.numero_id,'')), 'B')||setweight(to_tsvector('simple', coalesce(new.eppn,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.eppn_init,'')), 'B')||setweight(to_tsvector('simple', coalesce(new.application_name,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.location,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.application_name,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.status,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.firstname,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.lastname,'')), 'A'); return new; end $$ LANGUAGE plpgsql;
CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON tag_log FOR EACH ROW EXECUTE PROCEDURE textsearchable_taglog_trigger();
CREATE FUNCTION textsearchable_device_trigger() RETURNS trigger AS $$ begin new.textsearchable_index_col = setweight(to_tsvector('simple', coalesce(new.eppn_init,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.numero_id,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.imei,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.mac_address,'')), 'A')||setweight(to_tsvector('simple', coalesce(new.location,'')), 'A')||setweight(to_tsvector('simple', coalesce(application.name,'')), 'A') FROM application where new.application=application.id; return new; end $$ LANGUAGE plpgsql;
CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON device FOR EACH ROW EXECUTE PROCEDURE textsearchable_device_trigger();

INSERT INTO appli_version (id, esup_nfc_tag_version, version) SELECT nextval('hibernate_sequence'), '2.4.x', '1' WHERE NOT EXISTS (SELECT * FROM appli_version);
